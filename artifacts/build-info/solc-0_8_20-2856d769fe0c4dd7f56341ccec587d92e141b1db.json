{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_20-2856d769fe0c4dd7f56341ccec587d92e141b1db",
  "solcVersion": "0.8.20",
  "solcLongVersion": "0.8.20+commit.a1b79de6",
  "userSourceNameMap": {
    "contracts/BettingForwards.sol": "project/contracts/BettingForwards.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "shanghai",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/BettingForwards.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract BettingForwards is ReentrancyGuard, Ownable {\n    constructor() Ownable(msg.sender) {}\n    struct Forward {\n        uint256 id;\n        string matchId;\n        address owner;\n        uint256 odds;\n        string encryptedStakeRef;\n        bool forSale;\n        uint256 price;\n        uint256 createdAt;\n    }\n\n    mapping(uint256 => Forward) public forwards;\n    mapping(address => uint256[]) public userForwards;\n    mapping(string => uint256[]) public matchForwards;\n    \n    uint256 public nextForwardId = 1;\n    uint256 public platformFee = 250; // 2.5% in basis points\n    \n    event ForwardLocked(\n        uint256 indexed forwardId,\n        address indexed owner,\n        string matchId,\n        uint256 odds,\n        string encryptedStakeRef\n    );\n    \n    event ForwardListed(\n        uint256 indexed forwardId,\n        uint256 price\n    );\n    \n    event ForwardBought(\n        uint256 indexed forwardId,\n        address indexed buyer,\n        address indexed seller,\n        uint256 price\n    );\n\n    function lockForward(\n        string memory _matchId,\n        uint256 _odds,\n        string memory _encryptedStakeRef\n    ) external returns (uint256) {\n        require(_odds > 0, \"Invalid odds\");\n        require(bytes(_matchId).length > 0, \"Match ID required\");\n        require(bytes(_encryptedStakeRef).length > 0, \"Encrypted stake reference required\");\n        \n        uint256 forwardId = nextForwardId++;\n        \n        forwards[forwardId] = Forward({\n            id: forwardId,\n            matchId: _matchId,\n            owner: msg.sender,\n            odds: _odds,\n            encryptedStakeRef: _encryptedStakeRef,\n            forSale: false,\n            price: 0,\n            createdAt: block.timestamp\n        });\n        \n        userForwards[msg.sender].push(forwardId);\n        matchForwards[_matchId].push(forwardId);\n        \n        emit ForwardLocked(forwardId, msg.sender, _matchId, _odds, _encryptedStakeRef);\n        \n        return forwardId;\n    }\n\n    function listForSale(uint256 _forwardId, uint256 _price) external {\n        require(forwards[_forwardId].owner == msg.sender, \"Not the owner\");\n        require(_price > 0, \"Price must be positive\");\n        require(!forwards[_forwardId].forSale, \"Already listed for sale\");\n        \n        forwards[_forwardId].forSale = true;\n        forwards[_forwardId].price = _price;\n        \n        emit ForwardListed(_forwardId, _price);\n    }\n\n    function buyForward(uint256 _forwardId) external payable nonReentrant {\n        Forward storage forward = forwards[_forwardId];\n        require(forward.forSale, \"Not for sale\");\n        require(msg.sender != forward.owner, \"Cannot buy your own forward\");\n        require(msg.value >= forward.price, \"Insufficient payment\");\n        \n        address seller = forward.owner;\n        uint256 price = forward.price;\n        uint256 fee = (price * platformFee) / 10000;\n        uint256 sellerAmount = price - fee;\n        \n        // Transfer ownership\n        forward.owner = msg.sender;\n        forward.forSale = false;\n        forward.price = 0;\n        \n        // Update user forwards\n        userForwards[msg.sender].push(_forwardId);\n        \n        // Transfer payment\n        payable(seller).transfer(sellerAmount);\n        if (fee > 0) {\n            payable(address(this)).transfer(fee);\n        }\n        \n        // Refund excess payment\n        if (msg.value > price) {\n            payable(msg.sender).transfer(msg.value - price);\n        }\n        \n        emit ForwardBought(_forwardId, msg.sender, seller, price);\n    }\n\n    function getUserForwards(address _user) external view returns (uint256[] memory) {\n        return userForwards[_user];\n    }\n\n    function getMatchForwards(string memory _matchId) external view returns (uint256[] memory) {\n        return matchForwards[_matchId];\n    }\n\n    function getForwardsForSale() external view returns (uint256[] memory) {\n        uint256[] memory saleForwards = new uint256[](nextForwardId - 1);\n        uint256 count = 0;\n        \n        for (uint256 i = 1; i < nextForwardId; i++) {\n            if (forwards[i].forSale) {\n                saleForwards[count] = i;\n                count++;\n            }\n        }\n        \n        // Resize array to actual count\n        uint256[] memory result = new uint256[](count);\n        for (uint256 i = 0; i < count; i++) {\n            result[i] = saleForwards[i];\n        }\n        \n        return result;\n    }\n\n    function withdrawFees() external onlyOwner {\n        payable(owner()).transfer(address(this).balance);\n    }\n\n    function setPlatformFee(uint256 _fee) external onlyOwner {\n        require(_fee <= 1000, \"Fee cannot exceed 10%\");\n        platformFee = _fee;\n    }\n}\n"
      }
    }
  }
}