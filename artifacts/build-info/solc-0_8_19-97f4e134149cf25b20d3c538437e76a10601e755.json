{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_19-97f4e134149cf25b20d3c538437e76a10601e755",
  "solcVersion": "0.8.19",
  "solcLongVersion": "0.8.19+commit.7dd6d404",
  "userSourceNameMap": {
    "contracts/BettingForwards.sol": "project/contracts/BettingForwards.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "paris",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/BettingForwards.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ncontract BettingForwards {\n    struct Forward {\n        uint256 id;\n        address owner;\n        string matchId;\n        uint256 odds; // Stored as basis points (e.g., 150 = 1.5x)\n        string encryptedStakeRef; // iExec DataProtector reference\n        bool forSale;\n        uint256 salePrice;\n        uint256 createdAt;\n    }\n\n    mapping(uint256 => Forward) public forwards;\n    mapping(address => uint256[]) public userForwards;\n    mapping(string => uint256[]) public matchForwards;\n    \n    uint256 public nextForwardId = 1;\n    uint256 public platformFee = 250; // 2.5% in basis points\n    \n    event ForwardLocked(\n        uint256 indexed forwardId,\n        address indexed owner,\n        string matchId,\n        uint256 odds,\n        string encryptedStakeRef\n    );\n    \n    event ForwardListed(\n        uint256 indexed forwardId,\n        uint256 salePrice\n    );\n    \n    event ForwardPurchased(\n        uint256 indexed forwardId,\n        address indexed buyer,\n        address indexed seller,\n        uint256 price\n    );\n\n    function lockForward(\n        string memory _matchId,\n        uint256 _odds,\n        string memory _encryptedStakeRef\n    ) external returns (uint256) {\n        uint256 forwardId = nextForwardId++;\n        \n        forwards[forwardId] = Forward({\n            id: forwardId,\n            owner: msg.sender,\n            matchId: _matchId,\n            odds: _odds,\n            encryptedStakeRef: _encryptedStakeRef,\n            forSale: false,\n            salePrice: 0,\n            createdAt: block.timestamp\n        });\n        \n        userForwards[msg.sender].push(forwardId);\n        matchForwards[_matchId].push(forwardId);\n        \n        emit ForwardLocked(forwardId, msg.sender, _matchId, _odds, _encryptedStakeRef);\n        \n        return forwardId;\n    }\n\n    function listForSale(uint256 _forwardId, uint256 _salePrice) external {\n        require(forwards[_forwardId].owner == msg.sender, \"Not the owner\");\n        require(_salePrice > 0, \"Price must be greater than 0\");\n        \n        forwards[_forwardId].forSale = true;\n        forwards[_forwardId].salePrice = _salePrice;\n        \n        emit ForwardListed(_forwardId, _salePrice);\n    }\n\n    function buyForward(uint256 _forwardId) external payable {\n        Forward storage forward = forwards[_forwardId];\n        require(forward.forSale, \"Forward not for sale\");\n        require(msg.sender != forward.owner, \"Cannot buy your own forward\");\n        require(msg.value >= forward.salePrice, \"Insufficient payment\");\n        \n        address seller = forward.owner;\n        uint256 price = forward.salePrice;\n        uint256 fee = (price * platformFee) / 10000;\n        uint256 sellerAmount = price - fee;\n        \n        // Transfer ownership\n        forward.owner = msg.sender;\n        forward.forSale = false;\n        forward.salePrice = 0;\n        \n        // Update user forwards\n        userForwards[msg.sender].push(_forwardId);\n        \n        // Transfer payment\n        payable(seller).transfer(sellerAmount);\n        if (fee > 0) {\n            payable(address(this)).transfer(fee);\n        }\n        \n        // Refund excess payment\n        if (msg.value > price) {\n            payable(msg.sender).transfer(msg.value - price);\n        }\n        \n        emit ForwardPurchased(_forwardId, msg.sender, seller, price);\n    }\n\n    function getUserForwards(address _user) external view returns (uint256[] memory) {\n        return userForwards[_user];\n    }\n\n    function getMatchForwards(string memory _matchId) external view returns (uint256[] memory) {\n        return matchForwards[_matchId];\n    }\n\n    function getForwardsForSale() external view returns (uint256[] memory) {\n        uint256[] memory saleForwards = new uint256[](nextForwardId - 1);\n        uint256 count = 0;\n        \n        for (uint256 i = 1; i < nextForwardId; i++) {\n            if (forwards[i].forSale) {\n                saleForwards[count] = i;\n                count++;\n            }\n        }\n        \n        // Resize array to actual count\n        uint256[] memory result = new uint256[](count);\n        for (uint256 i = 0; i < count; i++) {\n            result[i] = saleForwards[i];\n        }\n        \n        return result;\n    }\n\n    function withdrawFees() external {\n        require(msg.sender == owner(), \"Only owner can withdraw fees\");\n        payable(owner()).transfer(address(this).balance);\n    }\n\n    function setPlatformFee(uint256 _fee) external {\n        require(msg.sender == owner(), \"Only owner can set fee\");\n        require(_fee <= 1000, \"Fee cannot exceed 10%\");\n        platformFee = _fee;\n    }\n\n    // Simple owner function for testing\n    address private _owner;\n    \n    constructor() {\n        _owner = msg.sender;\n    }\n    \n    function owner() public view returns (address) {\n        return _owner;\n    }\n}\n"
      }
    }
  }
}